{"name":"Wunderlist","tagline":"SDK for the latest Wunderlist API version.","body":"# Use the latest Wunderlist API version in your apps.\r\n[![Latest Stable Version](https://poser.pugx.org/johnrivs/wunderlist/v/stable)](https://packagist.org/packages/johnrivs/wunderlist) [![Total Downloads](https://poser.pugx.org/johnrivs/wunderlist/downloads)](https://packagist.org/packages/johnrivs/wunderlist) [![License](https://poser.pugx.org/johnrivs/wunderlist/license)](https://packagist.org/packages/johnrivs/wunderlist)\r\n\r\nCurrent status: in development.\r\n\r\n## FAQ\r\n##### What exactly is this pacakage?\r\nThis package is a wrapper for each endpoint in the Wunderlist API. To know what attributes you need to provide to each method, the data it returns or what status code is set, head over to the [official Wunderlist API documentation](https://developer.wunderlist.com/documentation ).\r\n\r\n##### How flexible is this package?\r\nSince this package doesn't perform validation or sanitization, you can provide any attribute to (almost) every method. However, it'll check if the attributes contain the fields required by the endpoint. If you provide unrecognized attribute fields, they will be ignored. Again, to know what fields should be present in the attributes for a Wunderlist API endpoint, have a look at the [official Wunderlist API documentation](https://developer.wunderlist.com/documentation ). \r\n\r\n##### How does it look like?\r\nIn the current interation of this package, (almost) each method maps to a Wunderlist API endpoint. In the future, I might turn the interface to a more fluent one.\r\nRight now, this is how the interface looks:\r\n```php\r\n// Get all tasks for a given list\r\n$wunderlist->getTasks(['list_id' => 9876]);\r\n\r\n// Get all lists\r\n$wunderlist->getLists();\r\n```\r\nIn the future, it'd look like this:\r\n```php\r\n// Get all tasks for a given list\r\n$wunderlist->lists()->find(9876)->tasks()->all();\r\n\r\n// Get the first task of each list\r\n$wunderlist->lists()->all()->tasks()->first();\r\n```\r\nIf you've ever used [Laravel's Eloquent](http://laravel.com/docs/5.1/eloquent ), you can probably see where I'd take the inspiration from..\r\n\r\n##### How do I provide data?\r\nFor most methods you'll need to provide an array of attributes, however, for certain ones you'll need to supply some value(s):\r\n- Task\r\n    - `getTask($taskId)` The id of the task.\r\n    - more to come...\r\n\r\n##### What if something goes wrong?\r\nWell.. at the time of this writing, the Wunderlist API isn't too helpful when it comes to error messages, so make sure you stick to the docs and ask any questions in the docs comment section.\r\n\r\n#### Progress\r\n- Folder\r\n    - ~~Get all folders~~\r\n    - ~~Get a folder~~\r\n    - Create a folder\r\n    - Update a folder\r\n    - Delete a folder\r\n    - ~~Get folder revisions~~\r\n- Lists\r\n    - ~~Get all lists~~\r\n    - ~~Get a list~~\r\n    - Create a list\r\n    - Update a list\r\n    - Make a list public\r\n    - Delete a list\r\n- Note\r\n    - ~~Get all notes~~\r\n    - ~~Get a note~~\r\n    - Create a note\r\n    - Update a note\r\n    - Delete a note\r\n- Reminder\r\n    - ~~Get all reminders~~\r\n    - Create a reminder\r\n    - Update a reminder\r\n    - Delete a reminder\r\n- Subtask\r\n    - ~~Get all subtasks~~\r\n    - ~~Get a subtask~~\r\n    - Create a subtask\r\n    - Update a subtask\r\n    - Delete a subtask\r\n- Task\r\n    - ~~Get all tasks~~\r\n    - ~~Get all completed tasks~~\r\n    - ~~Get a task~~\r\n    - Create a task\r\n    - Update a task\r\n    - Delete a task\r\n\r\nFinished:\r\n- Authorization\r\n- User (except restricting the list of users a user can access by list)\r\n- Webhook\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}